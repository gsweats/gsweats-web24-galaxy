---
import { getImage } from "astro:assets";
import { type CollectionEntry } from "astro:content";
import { SEO } from "astro-seo";

// component import
import siteData from "@config/siteData.json";
import jsonLDGenerator from "@js/jsonLD";

interface BaseProps {
  htmlTitle: string;
  htmlDescription: string;
  noindex?: boolean;
}

interface GenProps extends BaseProps {
  type: "general";
  image?: ImageMetadata;
}

interface BlogProps extends BaseProps {
  type: "blog";
  image: ImageMetadata;
  authors: CollectionEntry<"authors">[];
  postFrontmatter: CollectionEntry<"blog">["data"];
}

const {
  type,
  htmlTitle,
  htmlDescription,
  image,
  noindex = false,
} = Astro.props as GenProps | BlogProps;

let optimizedImage;
let jsonLD;
const canonicalUrl = new URL(Astro.url.pathname, Astro.site);

// if this is a blog page we do things differently
if (type === "blog") {
  const { authors, postFrontmatter } = Astro.props as BlogProps;

  optimizedImage = await getImage({
    src: image,
    format: "webp",
    quality: "high",
    width: 1200,
  });

  jsonLD = jsonLDGenerator({
    type: "blog",
    postFrontmatter: postFrontmatter,
    image: optimizedImage,
    authors: authors,
    canonicalUrl: canonicalUrl,
  });
}
// for general pages
else {
  jsonLD = jsonLDGenerator({
    type: "general",
  });
}

function trimEndSlash(str: string) {
  if (str[str.length - 1] === "/") {
    return str.slice(0, -1);
  } else {
    return str;
  }
}

// put together the image URL
const imageUrl =
  trimEndSlash(Astro.site?.toString() || "") +
  (optimizedImage?.src || siteData.defaultImage.src);

const opengraphProps = {
  basic: {
    title: htmlTitle,
    type: "website",
    image: imageUrl,
    url: canonicalUrl.toString(),
  },
  optional: {
    description: htmlDescription,
    siteName: siteData.title,
  },
  image: {
    type: "image/webp",
    width: optimizedImage?.attributes.width || "1200",
    height: optimizedImage?.attributes.height || "800",
    alt: htmlTitle,
  },
};
---

<SEO
  title={htmlTitle}
  description={htmlDescription}
  canonical={canonicalUrl.toString()}
  openGraph={opengraphProps}
  twitter={{
    site: siteData.twitter.site,
    creator: siteData.twitter.creator,
    card: "summary_large_image",
    title: htmlTitle,
    description: htmlDescription,
    image: imageUrl,
  }}
  noindex={noindex}
  nofollow={noindex}
/>

<!-- JSON LD -->
<Fragment set:html={jsonLD} />
